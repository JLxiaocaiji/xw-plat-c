<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.SysUserMapper">

    <update id="updateUser" parameterType="SysUser">
        update sys_user
        <set>
            <if test="deptId != null and deptId != 0">
                dept_id = #{deptId}
            </if>
            <if test="userName != null and userName != 0">
                user_name = #{userName}
            </if>
            <if test="nickName != null and nickName != ''">nick_name = #{nickName},</if>
            <if test="email != null ">email = #{email},</if>
            <if test="phonenumber != null ">phonenumber = #{phonenumber},</if>
            <if test="sex != null and sex != ''">sex = #{sex},</if>
            <if test="avatar != null and avatar != ''">avatar = #{avatar},</if>
            <if test="password != null and password != ''">password = #{password},</if>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="loginIp != null and loginIp != ''">login_ip = #{loginIp},</if>
            <if test="loginDate != null">login_date = #{loginDate},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            <if test="remark != null">remark = #{remark},</if>
            update_time = sysdate()
        </set>
        where user_id = #{userId}
    </update>

<!--    创建了一个名为 SysUserResult 的结果映射，其类型为 SysUser-->
    <resultMap id="SysUserResult" type="SysUser">
<!--        <id> 元素用于定义结果集中唯一标识符列（通常是主键）与映射对象的属性之间的关联-->
<!--        SysUser 类中的属性名称为 userId, 数据库表中对应的列名称为 user_id-->
        <id property="userId" column="user_id" />
        <result property="deptId" column="dept_id" />
        <result property="userName" column="user_name"/>
        <result property="nickName" column="nick_name"/>
        <result property="email" column="email"/>
        <result property="phonenumber" column="phonenumber"/>
        <result property="sex" column="sex"/>
        <result property="avatar" column="avatar"/>
        <result property="password" column="password"/>
        <result property="status" column="status"/>
        <result property="delFlag" column="del_flag"/>
        <result property="loginIp" column="login_ip"/>
        <result property="loginDate" column="login_date"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <result property="remark" column="remark"/>

<!--        <association> 元素用于处理“一对一”关联关系，即一个 Java 对象的属性是另一个对象的实例-->
<!--        SysUser 类中的属性名称为 dept，该属性应该是一个 SysDept 类型的实例-->
<!--        用于关联的列名称为 dept_id-->
<!--        属性 dept 的 Java 类型为 SysDept-->
<!--    resultMap="deptResult"：指定了用于映射 SysDept 对象的 <resultMap> 的 id。这意味着 MyBatis 将使用名为 deptResult 的结果映射来填充 SysDept 对象-->
        <association property="dept" column="dept_id" javaType="SysDept" resultMap="deptResult"/>

<!--        <collection> 元素用于处理“一对多”关联关系，即一个 Java 对象的属性是一个集合，集合中的元素是另一个对象的实例-->
<!--    property="roles"：指定了 SysUser 类中的属性名称为 roles，该属性应该是一个 List<Role> 类型的集合。-->
<!--    javaType="java.util.List"：指定了属性 roles 的 Java 类型为 List。-->
<!--    resultMap="RoleResult"：指定了用于映射集合中 Role 对象的 <resultMap> 的 id。这意味着 MyBatis 将使用名为 RoleResult 的结果映射来填充集合中的每个 Role 对象-->
        <collection property="roles" javaType="java.util.List" resultMap="RoleResult" />
    </resultMap>

    <resultMap id="deptResult" type="SysDept">
        <id property="deptId" column="dept_id" />
        <result property="parentId" column="parent_id"/>
        <result property="deptName" column="dept_name"/>
        <result property="ancestors" column="ancestors"/>
        <result property="orderNum" column="order_num"/>
        <result property="leader" column="leader"/>
        <result property="status" column="dept_status"/>
    </resultMap>

    <resultMap id="RoleResult" type="SysRole">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name"/>
        <result property="roleKey" column="role_key"/>
        <result property="roleSort" column="role_sort"/>
        <result property="dataScope" column="data_scope"/>
        <result property="status" column="role_status"/>
    </resultMap>

    <sql id="selectUserVo">
        select u.user_id,
               u.dept_id,
               u.user_name,
               u.nick_name,
               u.email,
               u.avatar,
               u.phonenumber,
               u.password,
               u.sex,
               u.status,
               u.del_flag,
               u.login_ip,
               u.login_date,
               u.create_by,
               u.create_time,
               u.remark,
               d.dept_id,
               d.parent_id,
               d.ancestors,
               d.dept_name,
               d.order_num,
               d.leader,
               d.status as dept_status,
               r.role_id,
               r.role_name,
               r.role_key,
               r.role_sort,
               r.data_scope,
               r.status as role_status
        from sys_user u
                 left join sys_dept d on u.dept_id = d.dept_id
                 left join sys_user_role ur on u.user_id = ur.user_id
                 left join sys_role r on r.role_id = ur.role_id
    </sql>

<!--    传入参数的类型为 String-->
    <select id="selectUserByUserName" parameterType="String" resultMap="SysUserResult">
        允许使用其他 sql 片段
        <include refid="selectUserVo" />
        where u.user_name = #{userName} and u.del_flg = '0'
    </select>
</mapper>